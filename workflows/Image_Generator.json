{
  "name": "Image Generator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/image",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -100,
        -100
      ],
      "id": "a006eee3-80b8-405c-8d77-64642ad84d44",
      "name": "Webhook",
      "webhookId": "298e7bfd-ea01-4ae9-aae5-db109b927eae"
    },
    {
      "parameters": {
        "jsCode": "// --- Get Data ---\nconst alertData = $json.body.data;\n// --- Data Preparation & Formatting ---\n\n// 1. Handle Price Change Color and Icon\nconst isPriceProfit = alertData.price_change_value >= 0;\nconst priceChangeColor = isPriceProfit ? \"#26A69A\" : \"#F5426C\"; // Green for profit, Red for loss\nconst priceChangeIcon = isPriceProfit ? \"▲\" : \"▼\";\n\n// 2. Handle Underlying Price Change Color\nconst isUnderlyingProfit = alertData.underlying_change_value >= 0;\nconst underlyingChangeColor = isUnderlyingProfit ? \"#26A69A\" : \"#F5426C\";\n\n// 3. CORRECTED: Manually format the expiration date to \"Day Month Year\"\nlet formattedExpDate = \"Invalid Date\"; // Default value\nif (alertData.expiration_date && !isNaN(new Date(alertData.expiration_date).getTime())) {\n    const date = new Date(alertData.expiration_date);\n    const day = date.getDate();\n    const month = date.toLocaleDateString('en-US', { month: 'short' });\n    const year = date.getFullYear().toString().slice(-2);\n    formattedExpDate = `${day} ${month} ${year}`;\n}\n\n// 4. Format other numbers\nconst formattedOpenInterest = (alertData.open_interest || 0).toLocaleString();\nconst formattedVolume = (alertData.volume || 0).toLocaleString();\nconst formattedUnderlyingSymbol = (alertData.underlying || 'N/A').replace('W', '');\n\n// 5. Create the formatted strings with CORRECTED sign logic\nconst headerSubText = `${formattedExpDate} (W) ${alertData.type} 100`;\n\n\nconst priceChangeValueDisplay = `${isPriceProfit ? '+' : ''}${alertData.price_change_value.toFixed(2)}`;\nconst priceChangePercentDisplay = `${isPriceProfit ? '+' : ''}${alertData.price_change_percent.toFixed(2)}%`;\nconst priceChangeString = `${priceChangeIcon}${priceChangeValueDisplay} ${priceChangePercentDisplay}`;\n\nconst underlyingPriceString = `${(alertData.underlying_price || 0).toFixed(2)}`;\nconst underlyingPercentString = `${isUnderlyingProfit ? '+' : ''}${(alertData.underlying_change_percent || 0).toFixed(2)}%`;\n\nconst footerStatusString = `${alertData.status}, ${alertData.time} ET`;\n\n// --- SVG Template (No changes here) ---\nconst svgTemplate = `\n<svg width=\"632\" height=\"216\" viewBox=\"0 0 632 216\" xmlns=\"http://www.w3.org/2000/svg\">\n    <style>\n        .text { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; }\n        .header-main { font-size: 20px; font-weight: 400; fill: #FFFFFF; }\n        .header-sub { font-size: 12px; font-weight: 400; fill: #9DB2CE; }\n        .price-large { font-size: 60px; font-weight: 700; fill: ${priceChangeColor}; }\n        .price-change { font-size: 18px; font-weight: 600; fill: ${priceChangeColor}; }\n        .stat-label { font-size: 18px; font-weight: 400; fill: #9DB2CE; }\n        .stat-value { font-size: 18px; font-weight: 400; fill: #c7d9f0; text-anchor: end; }\n        .footer-text { font-size: 15px; font-weight: 500; fill: #c7d9f0; }\n        .footer-change { fill: ${underlyingChangeColor}; }\n    </style>\n    <rect width=\"100%\" height=\"100%\" fill=\"#131722\" />\n    <g transform=\"translate(0, -10)\">\n        <g transform=\"translate(0, 10)\">\n            <path d=\"M 35 54 L 25 42 L 35 30\" stroke=\"#FFFFFF\" fill=\"none\" stroke-width=\"2.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </g>\n        <text x=\"55\" y=\"48\" class=\"text header-main\">${alertData.underlying} $${alertData.strike_price}</text>\n        <text x=\"55\" y=\"70\" class=\"text header-sub\">${headerSubText}</text>\n        <g transform=\"translate(580, 28) scale(1.2)\">\n            <path d=\"M19 14v3h3v2h-3.001L19 22h-2l-.001-3H14v-2h3v-3h2zm1.243-9.243c2.262 2.268 2.34 5.88.236 8.235l-1.42-1.418c1.331-1.524 1.261-3.914-.232-5.404-1.503-1.499-3.92-1.563-5.49-.153l-1.335 1.198-1.336-1.197c-1.575-1.412-3.991-1.35-5.494.154-1.49 1.49-1.565 3.875-.192 5.451l8.432 8.446L12 21.485 3.52 12.993c-2.104-2.356-2.025-5.974.236-8.236 2.265-2.264 5.888-2.34 8.244-.228 2.349-2.109 5.979-2.039 8.242.228z\" fill=\"#FFFFFF\"/>\n        </g>\n    </g>\n    <g id=\"main-price\" transform=\"translate(25, 0)\">\n        <text x=\"-6\" y=\"136\" class=\"text price-large\">${alertData.last_price.toFixed(2)}</text>\n        <text x=\"0\" y=\"165\" class=\"text price-change\">${priceChangeString}</text>\n    </g>\n    <g id=\"stats\">\n        <text x=\"420\" y=\"100\" class=\"text stat-label\">Mid</text>\n        <text x=\"575\" y=\"100\" class=\"text stat-value\">${alertData.mid_price.toFixed(2)}</text>\n        <text x=\"420\" y=\"130\" class=\"text stat-label\">Open Int.</text>\n        <text x=\"575\" y=\"130\" class=\"text stat-value\">${formattedOpenInterest}</text>\n        <text x=\"420\" y=\"160\" class=\"text stat-label\">Vol.</text>\n        <text x=\"575\" y=\"160\" class=\"text stat-value\">${formattedVolume}</text>\n        <rect x=\"585\" y=\"85\" width=\"25\" height=\"80\" rx=\"5\" fill=\"#1E2A38\" />\n        <polygon points=\"592,124 602,124 597,129\" fill=\"#FFFFFF\"/>\n    </g>\n    <g id=\"footer\">\n        <text x=\"25\" y=\"202\" class=\"text footer-text\">\n            ${formattedUnderlyingSymbol}\n            <tspan class=\"footer-change\">${underlyingPriceString}</tspan> \n            <tspan class=\"footer-change\">${underlyingPercentString}</tspan>\n        </text>\n        <text x=\"570\" y=\"202\" class=\"text footer-text\" text-anchor=\"end\">${footerStatusString}</text>\n        <rect x=\"580\" y=\"186\" width=\"30\" height=\"22\" rx=\"5\" fill=\"#15294A\" />\n        <g transform=\"translate(588, 188) rotate(10)\">\n            <path fill=\"#448AFF\" d=\"M9.5 6.5L10 0H9L2 9.5h4.5L6 16h1l7-9.5z\"/>\n        </g>\n    </g>\n</svg>\n`;\n\n// --- NEW PART: Wrap SVG in an HTML document with CSS reset ---\nconst htmlPayload = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      html, body {\n        margin: 0;\n        padding: 0;\n      }\n    </style>\n  </head>\n  <body>\n    ${svgTemplate}\n  </body>\n</html>\n`;\n\n\n// --- Prepare Payload for Browserless ---\nconst browserlessPayload = {\n  html: htmlPayload, // Use the new HTML payload here\n  options: {\n    type: \"png\",\n    omitBackground: true\n  },\n  viewport: {\n    width: 632,\n    height: 216\n  }\n};\n\n// --- Final Output ---\nreturn [{\n  json: {\n    payloadString: JSON.stringify(browserlessPayload)\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        -100
      ],
      "id": "463d81ac-8416-477b-afb0-adfd81aa1052",
      "name": "Generate SVG"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://production-sfo.browserless.io/screenshot",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "2So4qgezoi3LZ9k03d74ebdff6dbb91c524023111c16cc59a"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ $json.payloadString }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "screenshot.png"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        340,
        -100
      ],
      "id": "5c20b1bc-6e50-4a41-b3e2-e6540b429cd6",
      "name": "Render PNG with Browserless"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        560,
        -100
      ],
      "id": "110439a0-7923-4df1-a1bf-398d480411f1",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.srv872032.hstgr.cloud",
            "user-agent": "axios/1.8.3",
            "content-length": "374",
            "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n.srv872032.hstgr.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "3875f1b9657f",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "template_type": "new_trade",
            "data": {
              "underlying": "AAPL",
              "strike_price": 255,
              "expiration_date": "2025-12-19T21:00:00.000Z",
              "type": "CALL",
              "last_price": 4.1,
              "mid_price": 4.075,
              "open_interest": 6092,
              "volume": 599,
              "status": "Open",
              "time": "10:40 29/08",
              "price_change_value": 0,
              "price_change_percent": 0,
              "underlying_price": 232.56,
              "underlying_change_value": 0,
              "underlying_change_percent": 0
            }
          },
          "webhookUrl": "https://n8n.srv872032.hstgr.cloud/webhook/image",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Generate SVG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate SVG": {
      "main": [
        [
          {
            "node": "Render PNG with Browserless",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render PNG with Browserless": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "424549d2-aac8-4bbb-b31b-a629606890b9",
  "meta": {
    "instanceId": "b036d84835e7556c560bea37ff33edb7c20ac2b65dd165fe92837c49995e063c"
  },
  "id": "bD9CofPgyEB1gVab",
  "tags": []
}